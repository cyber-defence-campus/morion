#!/usr/bin/env python3
## -*- coding: utf-8 -*-
from morion.log                     import Logger
from morion.tracing.gdb.hooking.lib import base_hook
from morion.tracing.gdb.trace       import GdbHelper
from typing                         import List, Tuple


class memcpy(base_hook):

    def __init__(self, name: str, entry_addr: int, leave_addr: int, target_addr: int, logger: Logger = Logger()) -> None:
        super().__init__(name, entry_addr, leave_addr, target_addr, logger)
        self.synopsis = "void *memcpy(void *restrict dest, const void *restrict src, size_t n);"
        return

    def on_entry(self) -> List[Tuple[int, bytes, str, str]]:
        try:
            arch = GdbHelper.get_architecture()
            if arch in ["armv6", "armv7"]:
                # Log arguments
                dest = GdbHelper.get_register_value("r0")
                src = GdbHelper.get_register_value("r1")
                n = GdbHelper.get_register_value("r2")
                self._logger.debug(f"\tdest = 0x{dest:x}")
                self._logger.debug(f"\tsrc  = 0x{src:x}")
                self._logger.debug(f"\tn    = {n:d}")
                return super().on_entry()
            raise Exception(f"Architecture '{arch:s}' not supported.")
        except Exception as e:
            self._logger.error(f"{self._name:s} (on=entry, mode={self._mode:s}) failed: {str(e):s}")
        return []

    def on_leave(self) -> List[Tuple[int, bytes, str, str]]:
        try:
            arch = GdbHelper.get_architecture()
            if arch in ["armv6", "armv7"]:
                # Log arguments
                ret = GdbHelper.get_register_value("r0")
                self._logger.debug(f"\tret  = 0x{ret:x}")
                # Move result to return register r0
                code  = self._arm_mov_to_reg("r0", ret)
                code.append("bx lr")
                return self._arm_assemble(self._target_addr, code, is_thumb=True, comment=f"{self._name:s} (on=leave, mode={self._mode:s})") 
            raise Exception(f"Architecture '{arch:s}' not supported.")
        except Exception as e:
            self._logger.error(f"{self._name:s} (on=leave, mode={self._mode:s}) failed: {str(e):s}")
        return []


class printf(base_hook):

    def __init__(self, name: str, entry_addr: int, leave_addr: int, target_addr: int, logger: Logger = Logger()) -> None:
        super().__init__(name, entry_addr, leave_addr, target_addr, logger)
        self.synopsis = "int printf(const char *restrict format, ...);"
        return


##class putchar(base_hook):
##
##    def __init__(self, name: str, entry_addr: int, leave_addr: int, target_addr: int, logger: Logger = Logger()) -> None:
##        super().__init__(name, entry_addr, leave_addr, target_addr, logger)
##        self.synopsis = "int putchar(int c);"
##        return
    

class strtol(base_hook):

    def __init__(self, name: str, entry_addr: int, leave_addr: int, target_addr: int, logger: Logger = Logger()) -> None:
        super().__init__(name, entry_addr, leave_addr, target_addr, logger)
        self.synopsis = "long strtol(const char *restrict nptr, char **restrict endptr, int base);"
        return

    def on_entry(self) -> List[Tuple[int, bytes, str, str]]:
        try:
            arch = GdbHelper.get_architecture()
            if arch in ["armv6", "armv7"]:
                # Log arguments
                self.nptr = GdbHelper.get_register_value("r0")
                nptr_val = GdbHelper.get_memory_string(self.nptr)
                self.endptr = GdbHelper.get_register_value("r1")
                self.base = GdbHelper.get_register_value("r2")
                self._logger.debug(f"\tnptr     = 0x{self.nptr:08x}")
                self._logger.debug(f"\t*nptr    = '{nptr_val:s}' [{len(nptr_val):d}]")
                self._logger.debug(f"\tendptr   = 0x{self.endptr:08x}")
                self._logger.debug(f"\tbase     = {self.base:d}")
                return super().on_entry()
            raise Exception(f"Architecture '{arch:s}' not supported.")
        except Exception as e:
            self._logger.error(f"{self._name:s} entry failed: {str(e):s}")
        return []

    def on_leave(self) -> List[Tuple[int, bytes, str, str]]:
        try:
            arch = GdbHelper.get_architecture()
            if arch in ["armv6", "armv7"]:
                # Log arguments
                if self.endptr:
                    endptr_val = GdbHelper.get_memory_string(GdbHelper.get_memory_value(self.endptr))
                    self._logger.debug(f"\t**endptr = '{endptr_val:s}' [{len(endptr_val):d}]")
                ret = GdbHelper.get_register_value("r0")
                self._logger.debug(f"\tret      = {ret:d}")
                # TODO: endptr: _arm_mov_to_mem
                # Move result to return register r0
                code  = self._arm_mov_to_reg("r0", ret)
                code.append("bx lr")
                return self._arm_assemble(self._target_addr, code, is_thumb=True, comment=f"{self._name:s} (on=leave, mode={self._mode:s})")                
            raise Exception(f"Architecture '{arch:s}' not supported.")
        except Exception as e:
            self._logger.error(f"{self._name:s} (on=leave, mode={self._mode:s}) failed: {str(e):s}")
        return []


class strtoul(strtol):

    def __init__(self, name: str, entry_addr: int, leave_addr: int, target_addr: int, logger: Logger = Logger()) -> None:
        super().__init__(name, entry_addr, leave_addr, target_addr, logger)
        self.synopsis = "unsigned long strtoul(const char *restrict nptr, char **restrict endptr, int base);"
        return

    
class strlen(base_hook):

    def __init__(self, name: str, entry_addr: int, leave_addr: int, target_addr: int, logger: Logger = Logger()) -> None:
        super().__init__(name, entry_addr, leave_addr, target_addr, logger)
        self.synopsis = "size_t strlen(const char *s);"
        return

    def on_entry(self) -> List[Tuple[int, bytes, str, str]]:
        try:
            arch = GdbHelper.get_architecture()
            if arch in ["armv6", "armv7"]:
                # Log arguments
                s = GdbHelper.get_register_value("r0")
                s_val = GdbHelper.get_memory_string(s)
                self._logger.debug(f"\ts   = 0x{s:08x}")
                self._logger.debug(f"\t*s  = '{s_val:s}' [{len(s_val):d}]")
                return super().on_entry()
            raise Exception(f"Architecture '{arch:s}' not supported.")
        except Exception as e:
            self._logger.error(f"{self._name:s} (on=entry, mode={self._mode:s}) failed: {str(e):s}")
        return []

    def on_leave(self) -> List[Tuple[int, bytes, str, str]]:
        try:
            arch = GdbHelper.get_architecture()
            if arch in ["armv6", "armv7"]:
                # Log arguments
                length = GdbHelper.get_register_value("r0")
                self._logger.debug(f"\tret = {length:d}")
                # Move result to return register r0
                code  = self._arm_mov_to_reg("r0", length)
                code.append("bx lr")
                return self._arm_assemble(self._target_addr, code, is_thumb=True, comment=f"{self._name:s} (on=leave, mode={self._mode:s})")
            raise Exception(f"Architecture '{arch:s}' not supported.")
        except Exception as e:
            self._logger.error(f"{self._name:s} (on=leave, mode={self._mode:s}) failed: {str(e):s}")
        return []
