#!/usr/bin/env python3
## -*- coding: utf-8 -*-
import IPython
from   morion.log import Logger
from   triton     import ARCH, Instruction, OPERAND, TritonContext


def identify_controllable_flows(ctx: TritonContext, inst: Instruction, logger: Logger = Logger()) -> bool:
    arch = ctx.getArchitecture()
    if arch != ARCH.ARM32:
        logger.error("Unsupported architecture!")
        return False
    regs = [("r11", "fp"), ("sp", None), ("r14", "lr"), ("pc", None)]
    for reg_name, reg_alias in regs:
        reg = ctx.getRegister(reg_name)
        if not ctx.isRegisterSymbolized(reg): continue
        logger.debug(f"Expression of register '{reg_name:s}' contains a symbolic variable.", color="yellow")
        reg_ast = ctx.getRegisterAst(reg)
        # Direct control flow change
        if inst.isControlFlow():
            if inst.isConditionTaken():
                taken_addr = ctx.getConcreteRegisterValue(ctx.registers.pc)
            else:
                ops = inst.getOperands()
                if len(ops) < 1:
                    logger.error(f"Control flow change with unexpected number of operands!")
                    return False
                op = ops[-1]
                if op.getType() != OPERAND.IMM:
                    logger.error(f"Control flow change with unexpected operand type!")
                    return False
                taken_addr = op.getValue()
            fallt_addr = inst.getNextAddress()
            # Control flow can reach targets other than the taken or fallthrough addresses
            ast_ctx = ctx.getAstContext()
            ast_cond = ast_ctx.land([reg_ast != taken_addr, reg_ast != fallt_addr])
            if ctx.isSat(ast_cond):
                logger.debug("Direct control flow change with unrestricted target!", color="red")
                IPython.embed(header="Investigate potential control hijack...")
            else:
                logger.debug("Direct control flow change with restricted target.", color="green")
        # Indirect control flow change
        else:
            reg_value = ctx.getConcreteRegisterValue(reg)
            if ctx.isSat(reg_ast != reg_value):
                logger.debug("Indirect control flow change with unrestricted target!", color="red")
                IPython.embed(header="Investigate potential control hijack...")
            else:
                logger.debug("Indirect control flow change with restricted target.", color="green")
    return True
